<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Manjaro/MacOS 搭建 Github Pages 个人博客]]></title>
    <url>%2F2019%2F04%2F15%2Fhexo%2F</url>
    <content type="text"><![CDATA[这篇主要是小白记录新建 Github Pages 的过程，大佬手下留情 :-D 有疑问可以交流的啊 Github 配置本地 Hexo: 1. 安装 Ｎode.js Manjaro 利用 nvm 安装 Node.js 1wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装 nvm 后安装 Node.js 1nvm install stable MacOS 利用 Homebrew 安装 Node.js 1curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/local --strip 1 安装 brew 后安装 Node.js 1brew install node 2. 安装git Manjaro 似乎默认已经安装， 1sudo pacman -S git MacOS 1brew install git 3. 全局安装 Hexo Manjaro 1sudo npm install -g hexo MacOS 1npm install -g hexo 4. 创建blog文件 1hexo init blog 5. 安装 12cd blognpm install 6. 启动 Hexo 1hexo s 7. 替换为next主题 在 blog 目录下 1git clone https://github.com/iissnan/hexo-theme-next themes/next 修改 blog 目录下的 _config.yml 文件 1vim _config.yml 将 theme: landscape 替换为 theme: next 8. 启动 hexo 服务器 在 blog 目录下 123hexo cleanhexo ghexo s 在执行完上面三条命令后，终端中显示 http://localhost:4000 ，在浏览器中输入 http://localhost:4000 ，就会看到本地 hexo 服务器已经配置成功 效果图 9. 开启 MathJax 在 blog 目录下 1vim ./themes/next/_config.yml 找到 mathjax 修改为 mathjax: ​ enable: true Github Pages 配置 hexo 在本地已经配置好本地服务器，接下来需要在github上创建 repository 1. 选择New repository 2. 选择repository name repository name 一般设置为 “username.github.io”, 其中”username” 一般是你的github 用户名， 选择库名后，在页面底端勾选”Initialize this repository with a README “; 创建成功后就可以在浏览器中使用 https://用户名.github.io 来访问 将本地配置的 blog 提交到 Github Pages 1. Clone repository 1git clone https://github.com/username/username.github.io 2. 生成 index.html 12cd username.github.ioecho "Hello World" &gt; index.html 3. 推送本地文件到 Github Pages 12345git add --allgit commit -m "Initial commit"git config --global user.name "github用户名"git config --global user.email github邮箱git push -u origin master 如果输入 “git push -u origin master” 后邮箱报错，可以到 https://github.com 的 “Setting” 中的 “Email” 取消勾选 “Keep my email address private” 同步本地的 hexo 博客到 github 上 1. 安装一个扩展 在 blog 目录下 1sudo npm install hexo-deployer-git --save 2. 配置_config.yml 修改添加 1234deploy:type: gitrepository: https://github.com/username/username.github.io.gitbranch: master 3. 清除缓存上传 hexo 到 Github Pages 123hexo cleanhexo ghexo d 这时候在浏览器中输入 https://用户名.github.io 就可以访问博客了 美化：更换 theme CyanStyle 是 Wordpress 的 Twentytwelve 主题在 Hexo 上的迁移，清新简约，个人感觉良好 1. clone hexo-theme-cyanstyle 在 blog 目录下 1git clone https://github.com/wizardforcel/hexo-theme-cyanstyle themes/cyanstyle 2. 修改 _config.yml 在 blog 目录下， 修改 _config.yml 中的 theme 为 theme: cyanstyle 3. 本地预览 在 blog 目录下 123hexo cleanhexo ghexo s 个人觉得挺好看的 4. 提交到 Github Repositories 在 blog 目录下 123hexo cleanhexo ghexo d 5. 浏览器浏览 新建博文 主要解决在 hexo 博客中插入图片路径问题 1. 修改_config.yml 在 blog 目录下修改 _config.yml 配置文件中的 post_asset_folder: true 此时在新建博客的时候会自动创建一个文件夹 2. 安装一个扩展 在 blog 目录下执行 1npm install https://github.com/CodeFalling/hexo-asset-image --save 3. 创建博客 在 blog 目录下执行 1hexo new "博客名" 之后会在 blog/source/_post/下出现 “博客名.md” 和 “博客名”文件夹 4. 编写 .md 文件 编写 blog/source/_post/“博客名.md” markdown 是一种标记语言，网上教程太多，这里不再赘述了 O(∩_∩)O~~ 5. 在 .md 文件中插入图片 先将图片文件放到 /blog/source/_post/“博客名” 文件夹下 然后在 .md 文件中 插入 1![aratar](图像名) 输入图像名的时候不能有路径，只需要图像名和后缀即可，比如 “cyanstyle.png” 注意：不要通过 “选择本地文件” 方式插入图片，这种方式插入图片时是绝对路径 6. 本地预览 在 blog 目录下执行 123hexo cleanhexo ghexo s 浏览器访问 http://localhost:4000 7. 提交到 Github Repositories 在 blog 目录下执行 123hexo cleanhexo ghexo d 浏览器访问 https://用户名.github.io 参考：https://www.jianshu.com/p/e49eeafe506e 参考：https://www.jianshu.com/p/c2ba9533088a 参考：https://www.jianshu.com/p/cf0628478a4e]]></content>
      <categories>
        <category>Hexo</category>
        <category>Next</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
